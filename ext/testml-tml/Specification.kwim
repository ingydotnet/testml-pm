= TestML Overview

TestML is an "Acmeist"<http://acmeism.org> software testing framework. That
means it is for writing tests that can be run in many different programming
languages.

The primary focus of TestML is to write tests for modules that are intended to
be ported to several programming languages. (Writing modules like this happens
to be a primary focus of Acmeism.) Using TestML, you just need to write and
maintain one set of tests. In this sense TestML acts like a specification for
an Acmeist module.

The git repository that tracks this Specification is called
"testml-tml"<https://github.com/ingydotnet/testml-tml>. TestML itself is an
Acmeist module, and this repository is the test suite (and therefore the
specification) for TestML implementations. The repository contains many files
that end with a `.tml` extension. Each file is a TestML test. A complete TestML
implementation should pass all these tests.

TestML has been designed from the viewpoint that an implementor will be chosing
the language specific test framework that they are already familiar with, and
will want to write lots of non-TestML tests, while still passing all the TestML
ones. Every TestML implementation that has been ported to a given programming
language will have a TestML.Runtime class to work with each popular testing
framework in that language. So when you run the entire test suite, all the
tests will simply Do The Right Thing, with a minimum of fuss.

== Sample TestML file

    #!/usr/bin/env testml
    # The line above is a Unix hashbang for executable TestML files.

    # TestML version Directive. Directives always begin with '%'.
    %TestML 0.1.0

    # `Plan` is a special variable that suggests how many tests/assertions are
    # expected to run. Plan is optional and not supported by all test
    # frameworks.
    # Note: Things that begin with a capital letter, usually are specified by
    # TestML, and lowercase items belong to the test author.
    Plan = 3

    # An implicit loop against all the Data Blocks containing both 'text' and
    # 'upper' Data Points. The `uppercase` Bridge method is called against each
    # 'text' point, and then an assertion is made that the result matches the
    # 'upper' point. TestML will make the assertion using the whatever native,
    # language specific test framework that has been chosen.
    *text.uppercase == *upper

    # Data section begins here. There are 3 Data Blocks defined. Each one has a
    # Label and 2 named Data Points.
    === Song verse
    --- text
    When I was just a little boy
    And the devil would call my name
    --- upper
    WHEN I WAS JUST A LITTLE BOY
    AND THE DEVIL WOULD CALL MY NAME

    # If the point name is followed by a colon, the data is the rest of the
    # line.
    === Single Line
    --- text: I like pie
    --- upper: I LIKE PIE

    # If there is no colon, the data is the lines that follow, until something
    # else begins. Trailing blank lines are removed, so use them for
    # readability.
    === Motto
    --- text
    Live Free or Die
    --- upper
    LIVE FREE OR DIE

== TestML Glossary

Document ::
    A text stream that contains a Code Section and/or a Data Section (in that
    order). A document may also contain Directive Statements and Comments.

Code Section ::

Data Section ::

Directives ::

Data Block ::

Data Point ::

Block Label ::

Function ::

Statement ::

Variable ::

Global Variable ::

Assertion ::

== Operators

`a == b` :: `EQ(a, b)`
`a ~~ b` :: `HAS(a, b)`
`a + b`  :: `Add(a, b)`
`a = b`  :: `Set(a, b)`
`a.b`    :: `Call(b, a)`
`a.b(c)` :: `Call(b, a, c)`

== Data Types

`Func` :: A callable TestML function.

`Str` :: A unicode string.

`Num` :: An integer or floating point number.

`Bool` :: True or False.

`List` :: A container of zero or more values of the same type.

`Name` :: An indentifier for accessing a variable.

`Native` :: A pointer to an object in the language being used.

== Functions

TestML provides a standard library of many functions. These functions are
grouped into the following categories:

=== Assertion Functions

Assertion functions are special because they callback into the assertion
facilities of the native test framework being used.

`EQ a:got -> a:want -> Bool:equal?` ::
    Compare 2 values of the same type and assert that they are Equivalent.

`HAS Str:got -> Str:want -> Bool:has?` ::
    Assert that the `want` substring is contained by the `got` string.

`OK Bool:got -> Bool:ok?` ::
    Assert that both the `want` value is true and no exception occured. `OK`
    will implicitly catch any uncaught exceptions.

=== Variable Functions

`Get Name:name -> a:value` ::
    Get the value of a variable by name. Look in the current namespace stash,
    and traverse up if necessary.

`Set Name:name -> a:value -> a:value` ::
    Store a value by name into the current function's namespace stash.

`Top Name:name -> a:value` ::
    Get a variable from the top level (global) namespace.

=== Cast Functions

Some types can be runtime cast into other types. The casting function name is
always the same as the name of the type. For instance, in this expression:

    *a.b.Bool.OK        # OK(Bool(Call(Get('b'), Point('a'))))

`Bool` casts the value returned from calling Function 'b' and returns True or
False accordingly.

=== Bridge Functions

Bridge functions are provided by a Bridge Class. Generally these functions call
into the application that is beeing tested. A bridge class is defined in the
native programming language, and therefore must (unlike the TestML tests
themselves) be ported to every target language for the given project.

The bridge class is not named in the TestML Document itself, but through some
external mechanism provided by the TestML implementation for the native
language.

== TestML Runtime

TestML statements have a semantic system that is easy to read, but a little bit
different than traditional OO method call semantics. It works like this:

    a.B(c).d == e
    a.B(c).d.EQ(e)
    EQ(a.B(c).d, e)
    EQ(B(a, c).d, e)
    EQ(d(B(a, c)), e)
    EQ(d(B(a(), c())), e())

All the statements above are roughly equivalent. The first statement is typical
TestML chained transforms. Start with 'a', pass is to 'B' along with 'c', apply
'd' to the result and assert it is equal to e.

The interesting part is what are a, B, c, d and e, and where do they come from.
In typical OO:

    a.b(c)

means call method 'a' in the current namespace and then call method 'b' on the
namespace of the return value of 'a', and pass along value 'c'. 'a' is passed
along implicitly in the form of `this` or `self`. It can be thought of as:

    x = a()
    m = get_namespace_method('x', 'b')
    m(x, c)

In TestML, that's pretty much how it works internally, except that the method
lookup involves more than one namespace:

    * Check the return value namespace
    * Check the bridge class namespace
    * Check the runtime namespace

It is important to know that the return value is always a TestML object. Even
if a bridge class method returns a string, it will be turned into TestML::Str
object, and that namespace is the one that will be queried.

    *text.Lines.calibrate(*blob).yaml == *expect
    Point('text').Lines.calibrate(Point('blob')).yaml.EQ(Point('expect'))

The first line is a typical TestML statement. The second is a more verbose
equivalent.

`text`, `blob` and `expect` are point values from a data block. `Lines` is a
TestML::Str method that returns a TestML::List object. `Point` and `EQ` are
TestML::Runtime methods. `calibrate` and `yaml` are defined by the user in
their TestML::Bridge subclass.

Each method is looked up and called with the return value from the function on
its left, plus any values passed in directly.

== Examples

    a = b = 3
    Set(Name('a'), Set(Name('b'), Num('3')))



